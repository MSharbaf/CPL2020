/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.cpl.cPL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.cpl.cPL.CPLPackage;
import org.xtext.example.cpl.cPL.ConditionCS;
import org.xtext.example.cpl.cPL.RelationCP;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Relation CP</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.cpl.cPL.impl.RelationCPImpl#getOwnedConditions <em>Owned Conditions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RelationCPImpl extends MinimalEObjectImpl.Container implements RelationCP
{
  /**
   * The cached value of the '{@link #getOwnedConditions() <em>Owned Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedConditions()
   * @generated
   * @ordered
   */
  protected EList<ConditionCS> ownedConditions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationCPImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CPLPackage.Literals.RELATION_CP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConditionCS> getOwnedConditions()
  {
    if (ownedConditions == null)
    {
      ownedConditions = new EObjectContainmentEList<ConditionCS>(ConditionCS.class, this, CPLPackage.RELATION_CP__OWNED_CONDITIONS);
    }
    return ownedConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CPLPackage.RELATION_CP__OWNED_CONDITIONS:
        return ((InternalEList<?>)getOwnedConditions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CPLPackage.RELATION_CP__OWNED_CONDITIONS:
        return getOwnedConditions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CPLPackage.RELATION_CP__OWNED_CONDITIONS:
        getOwnedConditions().clear();
        getOwnedConditions().addAll((Collection<? extends ConditionCS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CPLPackage.RELATION_CP__OWNED_CONDITIONS:
        getOwnedConditions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CPLPackage.RELATION_CP__OWNED_CONDITIONS:
        return ownedConditions != null && !ownedConditions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RelationCPImpl
