/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.cpl;

import com.google.inject.Binder;
import com.google.inject.name.Names;
import java.util.Map;
import org.antlr.runtime.TokenSource;
import org.eclipse.ocl.xtext.base.services.RetokenizingTokenSource;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.SimpleNameProvider;
import org.eclipse.xtext.parser.IParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.validation.CompositeEValidator;
import org.xtext.example.cpl.AbstractCPLRuntimeModule;
import org.xtext.example.cpl.CPLResourceDescriptionStrategy;
import org.xtext.example.cpl.parser.antlr.CPLParser;
import org.xtext.example.cpl.scoping.CPLGlobalScopeProvider;
import org.xtext.example.cpl.scoping.CPLScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class CPLRuntimeModule extends AbstractCPLRuntimeModule {
  public static class RetokenizingCPLParser extends CPLParser {
    @Override
    public XtextTokenStream createTokenStream(final TokenSource tokenSource) {
      Map<Integer, String> _tokenDefMap = this.getTokenDefProvider().getTokenDefMap();
      RetokenizingTokenSource _retokenizingTokenSource = new RetokenizingTokenSource(tokenSource, _tokenDefMap);
      return super.createTokenStream(_retokenizingTokenSource);
    }
  }
  
  @Override
  public void configure(final Binder binder) {
    super.configure(binder);
    binder.bindConstant().annotatedWith(Names.named(CompositeEValidator.USE_EOBJECT_VALIDATOR)).to(false);
  }
  
  @Override
  public Class<? extends IParser> bindIParser() {
    return CPLRuntimeModule.RetokenizingCPLParser.class;
  }
  
  public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
    return CPLResourceDescriptionStrategy.class;
  }
  
  @Override
  public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
    return CPLGlobalScopeProvider.class;
  }
  
  @Override
  public Class<? extends IScopeProvider> bindIScopeProvider() {
    return CPLScopeProvider.class;
  }
  
  @Override
  public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
    return SimpleNameProvider.class;
  }
}
