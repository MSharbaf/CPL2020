/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.cpl

import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.xtext.example.cpl.scoping.CPLGlobalScopeProvider
import org.eclipse.xtext.scoping.IScopeProvider
import org.xtext.example.cpl.scoping.CPLScopeProvider
import org.eclipse.xtext.naming.SimpleNameProvider
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.antlr.runtime.TokenSource
import org.eclipse.ocl.xtext.base.services.RetokenizingTokenSource
import com.google.inject.name.Names
//import org.eclipse.ocl.xtext.completeocl.services.CompleteOCLHiddenTokenSequencer
import org.eclipse.xtext.parser.antlr.XtextTokenStream
import com.google.inject.Binder
import org.xtext.example.cpl.parser.antlr.CPLParser

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class CPLRuntimeModule extends AbstractCPLRuntimeModule {
	
	
	
	override void configure(Binder binder) {
		super.configure(binder);
		binder.bindConstant().annotatedWith(Names.named(org.eclipse.xtext.validation.CompositeEValidator.USE_EOBJECT_VALIDATOR)).to(false);
	}
	
//	@SuppressWarnings("restriction")
//	override Class<? extends org.eclipse.xtext.serializer.sequencer.IHiddenTokenSequencer> bindIHiddenTokenSequencer() {
//		CompleteOCLHiddenTokenSequencer
//	}
	
	override Class<? extends org.eclipse.xtext.parser.IParser> bindIParser() {
		RetokenizingCPLParser
	}

	static class RetokenizingCPLParser extends CPLParser
	{
		override XtextTokenStream createTokenStream(TokenSource tokenSource) {
			return super.createTokenStream(new RetokenizingTokenSource(tokenSource, getTokenDefProvider().getTokenDefMap()));
		}
	}
	
	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		CPLResourceDescriptionStrategy
	}
	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		CPLGlobalScopeProvider 
	}
	
	override Class<? extends IScopeProvider> bindIScopeProvider() {
		CPLScopeProvider
	}
	
	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
//		CPLQualifiedNameProvider
		SimpleNameProvider
	}
	
}
